untyped
global function BaseGametype_Init_MPSP
global function CodeCallback_OnClientConnectionStarted
global function CodeCallback_OnClientConnectionCompleted
global function CodeCallback_OnClientDisconnected
global function CodeCallback_OnPlayerRespawned
global function CodeCallback_OnPlayerKilled
global function DecideRespawnPlayer
global function RespawnAsPilot
global function RespawnAsTitan
global function TryGameModeAnnouncement

global function SetPlayerDeathsHidden
global function TrackTitanDamageInPlayerGameStat
global function CheckGameStateForPlayerMovement

global function ShouldEntTakeDamage_SPMP
global function GetTitanBuildTime
global function TitanPlayerHotDropsIntoLevel
global function SetGamemodeAllowsTeamSwitch

global function SetRecalculateRespawnAsTitanStartPointCallback

struct {
	bool playerDeathsHidden = false
	int titanDamageGameStat = -1
	
	array<entity> intermissionCameras
	
	entity functionref( entity player, entity basePoint ) recalculateRespawnAsTitanStartPointCallback
	table<entity, float> playerChangeTeamTimeBuffer
	bool gamemodeTeamSwitchEnabled = true
} file

void function BaseGametype_Init_MPSP()
{
	AddClientCommandCallback( "changeteam", ClientCommandCallbackChangeTeam )
	AddSpawnCallback( "info_intermission", AddIntermissionCamera )
	
	AddPostDamageCallback( "player", AddToTitanDamageStat )
	AddPostDamageCallback( "npc_titan", AddToTitanDamageStat )
	
	AddCallback_OnNPCKilled( CheckForAutoTitanDeath )
	AddCallback_OnPlayerKilled( CheckForAutoTitanDeath )
	AddCallback_OnTitanBecomesPilot( CheckGameStateForTitanEjection )
	AddCallback_OnPlayerGetsNewPilotLoadout( CheckPlayerGetsNewLoadout )

	RegisterSignal( "PlayerRespawnStarted" )
	RegisterSignal( "KillCamOver" )
	FlagInit( "WeaponDropsAllowed", true )
}

void function AddIntermissionCamera( entity camera )
{
	file.intermissionCameras.append( camera )
}

entity function GetRandomIntermissionCamera()
{
	if ( !file.intermissionCameras.len() )
		return null
	
	return file.intermissionCameras.getrandom()
}

void function CheckServerIdlingState()
{
	if ( Time() >= 60 * GetConVarInt( "ns_server_idle_time_refresh_max_time" ) )
		ServerCommand( "changelevel " + GetMapName() )
}










/*
██████  ██       █████  ██    ██ ███████ ██████       ██████  ██████  ███    ██ ███    ██ ███████  ██████ ████████ ██  ██████  ███    ██ 
██   ██ ██      ██   ██  ██  ██  ██      ██   ██     ██      ██    ██ ████   ██ ████   ██ ██      ██         ██    ██ ██    ██ ████   ██ 
██████  ██      ███████   ████   █████   ██████      ██      ██    ██ ██ ██  ██ ██ ██  ██ █████   ██         ██    ██ ██    ██ ██ ██  ██ 
██      ██      ██   ██    ██    ██      ██   ██     ██      ██    ██ ██  ██ ██ ██  ██ ██ ██      ██         ██    ██ ██    ██ ██  ██ ██ 
██      ███████ ██   ██    ██    ███████ ██   ██      ██████  ██████  ██   ████ ██   ████ ███████  ██████    ██    ██  ██████  ██   ████ 
*/

void function CodeCallback_OnClientConnectionStarted( entity player )
{
	// not a real player?
	#if DEV
	if ( player.GetPlayerName() == "Replay" )
		return
	#endif

	if ( IsLobby() )
	{
		Lobby_OnClientConnectionStarted( player )
		return
	}

//	ScreenFade( player, 0, 0, 0, 255, 2.0, 0.5, FFADE_IN | FFADE_PURGE )

	SetTargetName( player, "player" + player.entindex() )

	player.p.controllableProjectiles_scriptManagedID = CreateScriptManagedEntArray()
	player.p.npcFollowersArrayID = CreateScriptManagedEntArray()

	player.s = {}
	player.s.attackerInfo <- {}
	player.p.clientScriptInitialized = player.IsBot()
	player.s.inPostDeath <- null
	player.s.respawnCount <- 0
	player.s.respawnTime <- 0
	player.s.lostTitanTime <- 0
	player.s.cloakedShotsAllowed <- 0
	player.s.startDashMeleeTime <- 0
	player.s.respawnSelectionDone <- true  // this gets set to false in postdeaththread but we need it to be true when connecting
	player.s.waveSpawnProtection <- false

	player.s.nextStatUpdateFunc <- null

	player.s.activeTrapArrayId <- CreateScriptManagedEntArray()

	player.s.restartBurnCardEffectOnSpawn <- false
	player.s.replacementDropInProgress <- false

	player.s.inGracePeriod <- true

	// should I just add these when playing coop?
	player.s.usedLoadoutCrate <- false
	player.s.restockAmmoTime <- 0
	player.s.restockAmmoCrate <- null

	player.s.autoTitanLastEngageCalloutTime <- 0
	player.s.autoTitanLastEngageCallout <- null
	player.s.lastAIConversationTime <- {} // when was a conversation last played?

	player.s.updatedPersistenceOnDisconnect <- false

	player.s.lastFriendlySpawnedOn <- null
	player.s.nextWaveSpawnTime <- 0.0

	player.s.meleeSlowMoEndTime <- 0.0
	
	player.p.connectTime = Time()

	Assert( !player._entityVars )
	InitEntityVars( player )
	
	// Added via AddCallback_OnClientConnecting
	foreach ( callbackFunc in svGlobal.onClientConnectingCallbacks )
		callbackFunc( player )
	
	if ( !IsLobby() && GetGameState() <= eGameState.Epilogue && GetConVarBool( "ns_autobalance_teams_on_player_join" ) )
	{
		if ( GetCurrentPlaylistVarInt( "max_teams", 0 ) > 1 && !IsFFAGame() )
		{
			if ( GetPlayerArrayOfTeam( TEAM_MILITIA ).len() > GetPlayerArrayOfTeam( TEAM_IMC ).len() )
				SetTeam( player, TEAM_IMC )
			else
				SetTeam( player, TEAM_MILITIA )
		}
	}
	
	printl( "Player connect started: " + player + "---UID:" + player.GetUID() )
	
	InitPassives( player )

	CheckServerIdlingState()
}

// playerconnected
void function CodeCallback_OnClientConnectionCompleted( entity player )
{
	InitPersistentData( player )
	
	foreach ( otherPlayer in GetPlayerArray() )
	{
		if ( otherPlayer != player )
		{
			EmitSoundOnEntityOnlyToPlayer( otherPlayer, otherPlayer, "ui_spawn_friendlypilot" )
			EmitSoundOnEntityOnlyToPlayer( otherPlayer, otherPlayer, "ui_spawn_friendlypilot" )
			EmitSoundOnEntityOnlyToPlayer( otherPlayer, otherPlayer, "ui_spawn_friendlypilot" )
		}
	}
	
	if ( IsLobby() )
	{
		Lobby_OnClientConnectionCompleted( player )
		return
	}
	else if ( !IsFDMode( GAMETYPE ) )
	{
		// reset this for non-fd modes
		// for some reason the postgame scoreboard uses this to
		// determine if it should show the FD aegis rank one
		// FD should either set this in their own mode, or add an else
		// to this if statement when it releases
		player.SetPersistentVar( "lastFDTitanRef", "" )
	}

	player.hasConnected = true

	InitMeleeAnimEventCallbacks( player )
	ZiplineInit( player )
	
	UpdateMinimapStatus( player )
	UpdateMinimapStatusToOtherPlayers( player )
	MinimapPlayerConnected( player )
	NotifyClientsOfConnection( player, 1 )
	PlayCurrentTeamMusicEventsOnPlayer( player )
	SetCurrentTeamObjectiveForPlayer( player )

	entity skycam = GetEnt( "skybox_cam_level" )
	if ( skycam != null )
		player.SetSkyCamera( skycam )

	FinishClientScriptInitialization( player )

	// Added via AddCallback_OnClientConnected
	foreach ( callbackFunc in svGlobal.onClientConnectedCallbacks )
		callbackFunc( player )

	if ( !Flag( "PlayerDidSpawn") )
		__PlayerDidSpawn( player )

	svGlobal.levelEnt.Signal( "PlayerDidSpawn", { player = player } )

	if ( GetConVarBool( "ns_allow_spectators" ) )
	{
		if ( IsPrivateMatchSpectator( player ) )
		{
			SetPlayerEliminated( player )
			InitialisePrivateMatchSpectatorPlayer( player )
			return
		}
	}
	else
		player.SetPersistentVar( "privateMatchState", 0 )

	// handle spawning late joiners
	if ( GetGameState() >= eGameState.Playing )
	{
		if ( SpectatePlayerDuringPickLoadout() )
			thread SpectateTTSMenuPlayer( player )
		else if ( !IsEliminationBased() )
		{
			if ( Riff_IsTitanAvailable( player ) || ShouldIntroSpawnAsTitan() || svGlobal.forceSpawnAsTitan ) //Handles the conditions to spawn player as Titan right away or not
				thread RespawnAsTitan( player )
			else
				RespawnAsPilot( player )
		}
		else
		{
			SetPlayerEliminated( player )
			InitialisePrivateMatchSpectatorPlayer( player )
		}
	}
}

void function SpectateTTSMenuPlayer( entity player )
{
	player.EndSignal( "OnDestroy" )
	OnThreadEnd(
		function() : ( player )
		{
			if ( IsValid( player ) )
			{
				if ( !IsEliminationBased() )
				{
					if ( ShouldIntroSpawnAsTitan() && Riff_TitanAvailability() != eTitanAvailability.Never || svGlobal.forceSpawnAsTitan )
						thread RespawnAsTitan( player )
					else
						RespawnAsPilot( player )
				}
				else
				{
					SetPlayerEliminated( player )
					InitialisePrivateMatchSpectatorPlayer( player )
				}
			}
		}
	)

	player.WaitSignal( "StopSendingTTSMenuCommand" )
}

void function CodeCallback_OnClientDisconnected( entity player, string reason )
{
	foreach ( otherPlayer in GetPlayerArray() )
	{
		if ( otherPlayer != player )
		{
			EmitSoundOnEntityOnlyToPlayer( otherPlayer, otherPlayer, "ui_ingame_league_belowgoal" )
			EmitSoundOnEntityOnlyToPlayer( otherPlayer, otherPlayer, "ui_ingame_league_belowgoal" )
			EmitSoundOnEntityOnlyToPlayer( otherPlayer, otherPlayer, "ui_ingame_league_belowgoal" )
		}
	}

	if ( IsLobby() )
	{
		player.Signal( "_disconnectedInternal" )
		UpdateBadRepPresent()
		return
	}

	if ( !player.hasConnected )
		return

	// Added via AddCallback_OnClientDisconnected
	foreach ( callbackFunc in svGlobal.onClientDisconnectedCallbacks )
	{
		callbackFunc( player )
	}

	player.Disconnected()
	player.p.isDisconnected = true
	player.CleanupMPClasses()
}










/*
██████  ██       █████  ██    ██ ███████ ██████      ██████  ███████ ███████ ██████   █████  ██     ██ ███    ██ 
██   ██ ██      ██   ██  ██  ██  ██      ██   ██     ██   ██ ██      ██      ██   ██ ██   ██ ██     ██ ████   ██ 
██████  ██      ███████   ████   █████   ██████      ██████  █████   ███████ ██████  ███████ ██  █  ██ ██ ██  ██ 
██      ██      ██   ██    ██    ██      ██   ██     ██   ██ ██           ██ ██      ██   ██ ██ ███ ██ ██  ██ ██ 
██      ███████ ██   ██    ██    ███████ ██   ██     ██   ██ ███████ ███████ ██      ██   ██  ███ ███  ██   ████ 
*/

void function CodeCallback_OnPlayerRespawned( entity player )
{
	SetHumanRagdollImpactTable( player )
	
	player.s.respawnCount++
	player.s.respawnTime = Time()
	ClearRecentDamageHistory( player )
	
	if ( player.IsDissolving() )
		player.DissolveStop()
	
	player.Signal( "OnRespawned" ) // kill any postdeaththreads that could be running
	Loadouts_TryGivePilotLoadout( player )
	
	foreach ( entity weapon in player.GetMainWeapons() )
		weapon.SetProScreenOwner( player )
	
	bool spawnAsTitan = expect bool( player.GetPersistentVar( "spawnAsTitan" ) )
	if ( ( spawnAsTitan || svGlobal.forceSpawnIntoTitan ) && PlayerCanSpawnIntoTitan( player ) )
	{
		entity titan = player.GetPetTitan()
		TeleportToEnt( player, titan )
		PilotBecomesTitan( player, titan )
		titan.Destroy()
	}
	
	foreach ( void functionref( entity ) callback in svGlobal.onPlayerRespawnedCallbacks )
		callback( player )
		
	Remote_CallFunction_NonReplay( player, "ServerCallback_YouRespawned" )
	ClearLastAttacker( player ) // so dying to anything doesn't credit the same attacker after respawning
	ClearPlayerEliminated( player )
}










/*
██████  ██       █████  ██    ██ ███████ ██████      ██   ██ ██ ██      ██      ███████ ██████  
██   ██ ██      ██   ██  ██  ██  ██      ██   ██     ██  ██  ██ ██      ██      ██      ██   ██ 
██████  ██      ███████   ████   █████   ██████      █████   ██ ██      ██      █████   ██   ██ 
██      ██      ██   ██    ██    ██      ██   ██     ██  ██  ██ ██      ██      ██      ██   ██ 
██      ███████ ██   ██    ██    ███████ ██   ██     ██   ██ ██ ███████ ███████ ███████ ██████  
*/

void function CodeCallback_OnPlayerKilled( entity player, var damageInfo )
{
	PlayerOrNPCKilled( player, damageInfo )
	HandleDeathPackage( player, damageInfo )
	thread PostDeathThread_MP( player, damageInfo )
}

void function PostDeathThread_MP( entity player, var damageInfo ) // based on gametype_sp: postdeaththread_sp
{
	if ( player.s.inPostDeath )
		return

	float timeOfDeath = Time()
	player.p.postDeathThreadStartTime = timeOfDeath

	Assert( IsValid( player ), "Not a valid player" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnRespawned" )

	player.p.deathOrigin = player.GetOrigin()
	player.p.deathAngles = player.GetAngles()

	player.s.inPostDeath = true
	player.s.respawnSelectionDone = false

	player.cloakedForever = false
	player.stimmedForever = false
	player.SetNoTarget( false )
	player.SetNoTargetSmartAmmo( false )
	player.ClearExtraWeaponMods()

	// disable prediction to prevent it messing with ragdoll in some places, as well as killreplay and such
	player.SetPredictionEnabled( false )

	if ( player.IsTitan() )
		SoulDies( player.GetTitanSoul(), damageInfo ) // cleanup some titan stuff, no idea where else to put this

	ClearRespawnAvailable( player )
	
	OnThreadEnd( function() : ( player )
	{
		if ( IsValid( player ) )
			player.s.inPostDeath = false
	})

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	int methodOfDeath = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	table<int, bool> alreadyAssisted
	if ( IsValid( attacker ) )
	{
		foreach ( DamageHistoryStruct attackerInfo in player.e.recentDamageHistory )
		{
			if ( !IsValid( attackerInfo.attacker ) || !attackerInfo.attacker.IsPlayer() || attackerInfo.attacker == player )
				continue

			bool exists = attackerInfo.attacker.GetEncodedEHandle() in alreadyAssisted ? true : false
			if ( attackerInfo.attacker != attacker && !exists )
			{
				alreadyAssisted[attackerInfo.attacker.GetEncodedEHandle()] <- true
				Remote_CallFunction_NonReplay( attackerInfo.attacker, "ServerCallback_SetAssistInformation", attackerInfo.damageSourceId, attacker.GetEncodedEHandle(), player.GetEncodedEHandle(), attackerInfo.time ) 
				AddPlayerScore( attackerInfo.attacker, "PilotAssist" )
				attackerInfo.attacker.AddToPlayerGameStat( PGS_ASSISTS, 1 )
			}
		}

		if ( attacker.IsPlayer() )	
			Highlight_SetDeathRecapHighlight( attacker, "killer_outline" )
	}

	player.p.rematchOrigin = player.p.deathOrigin
	if ( IsValid( attacker ) && methodOfDeath == eDamageSourceId.titan_execution )
	{
		// execution can throw you out of the map
		player.p.rematchOrigin = attacker.GetOrigin()
	}

	player.Signal( "RodeoOver" )
	player.ClearParent()

	// do some pre-replay stuff if we're gonna do a replay
	float replayLength = CalculateLengthOfKillReplay( player, methodOfDeath )
	bool shouldDoReplay = Replay_IsEnabled() && IsValid( attacker ) && ShouldDoReplay( player, attacker, replayLength, methodOfDeath )
	table replayTracker = { validTime = null }
	if ( shouldDoReplay )
		thread TrackDestroyTimeForReplay( attacker, replayTracker )

	player.StartObserverMode( OBS_MODE_DEATHCAM )
	if ( ShouldSetObserverTarget( attacker ) )
		player.SetObserverTarget( attacker )
	else
		player.SetObserverTarget( null )

	if ( ( GamePlayingOrSuddenDeath() || GetGameState() == eGameState.Epilogue || GetGameState() == eGameState.WinnerDetermined ) && !file.playerDeathsHidden )
		player.AddToPlayerGameStat( PGS_DEATHS, 1 )

	if ( !file.playerDeathsHidden )
		Remote_CallFunction_NonReplay( player, "ServerCallback_YouDied", attacker.GetEncodedEHandle(), GetHealthFrac( attacker ), methodOfDeath )

	float deathcamLength = GetDeathCamLength( player )
	wait deathcamLength

	player.SetPlayerSettings( "spectator" ) // prevent a crash with going from titan => pilot on respawn
	player.StopPhysics() // need to set this after SetPlayerSettings
	player.SetPhysics( MOVETYPE_NONE ) // so they don't move around while dead, resets to default automatically on respawn
	
	// use info_intermission camera after deathcam, if it exists
	entity mapCamera = GetRandomIntermissionCamera()
	if ( mapCamera != null && !player.GetParent() )
	{
		player.SetObserverModeStaticPosition( mapCamera.GetOrigin() )
		player.SetObserverModeStaticAngles( mapCamera.GetAngles() )
		player.StartObserverMode( OBS_MODE_STATIC_LOCKED )
		player.SetObserverTarget( null )
	}

	// hack: double check if killcams are enabled and valid here in case gamestate has changed this
	shouldDoReplay = shouldDoReplay && Replay_IsEnabled() && IsValid( attacker ) && !IsRoundWinningKillReplayPlaying()
	// quick note: in cases where player.Die() is called: e.g. for round ends, player == attacker
	if ( shouldDoReplay )
	{	
		player.watchingKillreplayEndTime = Time() + replayLength
		float beforeTime = GetKillReplayBeforeTime( player, methodOfDeath )

		replayTracker.validTime <- null

		float respawnTime = Time() - 2 // seems to get the killreplay to end around the actual kill
		if ( "respawnTime" in attacker.s )
			respawnTime = Time() - expect float ( attacker.s.respawnTime )

		thread PlayerWatchesKillReplayWrapper( player, attacker, respawnTime, timeOfDeath, beforeTime, replayTracker )		
	}

	if ( !IsEliminationBased() || IsEliminationBased() && !IsPlayerEliminated( player ) )
	{
		// is it a good idea to do respawn code in postdeaththread? fuck if i know lol
		float respawnDelay = max( 0, GetCurrentPlaylistVarFloat( "respawn_delay", 0.0 ) - deathcamLength )
	
		print( "respawn delay " + respawnDelay )

		UpdateNextRespawnTime( player, Time() + respawnDelay )
		SetRespawnAvailable( player )

		wait respawnDelay

		int forceRespawn = GetCurrentPlaylistVarInt( "player_force_respawn", -1 )

		// -1 is disabled, anything over is the time we wait in seconds
		// before respawning the player
		if ( forceRespawn >= 0 )
			thread ForceRespawnMeSignalAfterDelay( player, forceRespawn )
		
		if ( !player.s.respawnSelectionDone && GetGameState() != eGameState.SuddenDeath ) // Only wait outside Sudden Death since players gets inputs blocked to respawn if they die before Sudden Death starts
			player.WaitSignal( "RespawnMe" )
		
		ClearRespawnAvailable( player ) // need so the respawn icon doesn't show for like a frame on next death

		TitanLoadoutDef loadout = GetTitanLoadoutForPlayer( player )
		bool hasWarpfall = loadout.passive3 == "pas_warpfall"
		bool spawnAsTitan = expect bool( player.GetPersistentVar( "spawnAsTitan" ) )

		if ( IsPrivateMatchSpectator( player ) ) // Spectators can still die from kill triggers
			InitialisePrivateMatchSpectatorPlayer( player )
		else if ( spawnAsTitan && IsReplacementTitanAvailable( player ) || Riff_SpawnAsTitan() == eSpawnAsTitan.Always || svGlobal.forceSpawnAsTitan )
			thread RespawnAsTitan( player, !hasWarpfall )
		else
			RespawnAsPilot( player )
	}
	else if ( GamePlayingOrSuddenDeath() || GetGameState() == eGameState.Epilogue )
	{
		if ( shouldDoReplay && player.IsWatchingKillReplay() )
			player.WaitSignal( "KillCamOver" )

		InitialisePrivateMatchSpectatorPlayer( player )
	}
}

// idk if this is a good delay or if it matches vanilla
void function ForceRespawnMeSignalAfterDelay( entity player, int delay = 5 )
{
	svGlobal.levelEnt.EndSignal( "GameStateChanged" )
	player.EndSignal( "RespawnMe" )
	player.EndSignal( "OnDestroy" )

	if ( player.IsWatchingKillReplay() )
		player.WaitSignal( "KillCamOver" )

	wait delay

	if ( IsRespawnAvailable( player ) )
	{
		#if DEV
		printt( format( "Forcing player respawn for player %s (took >%d seconds to respawn)", player.GetPlayerName(), delay ) )
		#endif
		player.Signal( "RespawnMe" )
	}
}

void function PlayerWatchesKillReplayWrapper( entity player, entity attacker, float timeSinceAttackerSpawned, float timeOfDeath, float beforeTime, table replayTracker )
{
	player.EndSignal( "RespawnMe" )
	player.EndSignal( "OnRespawned" )

	player.EndSignal( "OnDestroy" )
	attacker.EndSignal( "OnDestroy" )

	svGlobal.levelEnt.EndSignal( "GameStateChanged" )

	OnThreadEnd( function() : ( player ) 
	{
		if ( IsValid( player ) )
		{
			player.Signal( "KillCamOver" )
			player.ClearReplayDelay()
			player.ClearViewEntity()
		}
	})

	PlayerWatchesKillReplay( player, attacker.GetEncodedEHandle(), attacker.GetIndexForEntity(), timeSinceAttackerSpawned, timeOfDeath, beforeTime, replayTracker )
}










/*
██████  ██       █████  ██    ██ ███████ ██████      ██████  ███████ ███████ ██████   █████  ██     ██ ███    ██ 
██   ██ ██      ██   ██  ██  ██  ██      ██   ██     ██   ██ ██      ██      ██   ██ ██   ██ ██     ██ ████   ██ 
██████  ██      ███████   ████   █████   ██████      ██████  █████   ███████ ██████  ███████ ██  █  ██ ██ ██  ██ 
██      ██      ██   ██    ██    ██      ██   ██     ██   ██ ██           ██ ██      ██   ██ ██ ███ ██ ██  ██ ██ 
██      ███████ ██   ██    ██    ███████ ██   ██     ██   ██ ███████ ███████ ██      ██   ██  ███ ███  ██   ████ 
*/

void function DecideRespawnPlayer( entity player )
{
	// Unused, TF1 legacy code
}

void function RespawnAsPilot( entity player )
{
	if ( !PlayerCanSpawn( player ) )
		return

	entity spawnpoint = FindSpawnPoint( player, false, ( ShouldStartSpawn( player ) || Flag( "ForceStartSpawn" ) ) )
	DoRespawnPlayer( player, spawnpoint )
	
	player.isSpawning = false
	player.isSpawningHotDroppingAsTitan = false

	// Dying as Titan and respawning as Pilot keeps the Titan Icon over the player's name instead of reverting to the normal patch such player uses
	CallsignIcon callsignIcon = PlayerCallsignIcon_GetActive( player )
	player.SetTargetInfoIcon( callsignIcon.smallImage )
}

void function RespawnAsTitan( entity player, bool normalTitanfall = false )
{
	if ( !PlayerCanSpawn( player ) )
		return

	bool instantRespawn = ( !ShouldDoTitanfall() || GetCurrentPlaylistVarInt( "instant_respawn_as_titan", 0 ) == 1 )
	// Override if map needs to do forced warpfall such as Boomtown due the ceiling
	if ( normalTitanfall && Flag( "LevelHasRoof" ) || instantRespawn || !GetConVarBool( "ns_cinematic_titanfall" ) )
		normalTitanfall = false
	
	player.Signal( "PlayerRespawnStarted" )

	player.isSpawning = true
	player.isSpawningHotDroppingAsTitan = true

	entity spawnpoint = FindSpawnPoint( player, true, ( ShouldStartSpawn( player ) || Flag( "ForceStartSpawn" ) ) )
	if ( file.recalculateRespawnAsTitanStartPointCallback != null )
		spawnpoint = file.recalculateRespawnAsTitanStartPointCallback( player, spawnpoint )

	ToggleSpawnNodeInUse( spawnpoint, true )
 	TitanLoadoutDef titanLoadout = GetTitanLoadoutForPlayer( player )
	
	if ( !normalTitanfall && !instantRespawn )
	{
		asset model = GetPlayerSettingsAssetForClassName( titanLoadout.setFile, "bodymodel" )
		Attachment warpAttach = GetAttachmentAtTimeFromModel( model, "at_hotdrop_01", "offset", spawnpoint.GetOrigin(), spawnpoint.GetAngles(), 0 )
		entity warpFX = PlayFX( TURBO_WARP_FX, warpAttach.position, warpAttach.angle )
		warpFX.FXEnableRenderAlways()
		warpFX.DisableHibernation()
	}
	
	entity titan = CreateAutoTitanForPlayer_FromTitanLoadout( player, titanLoadout, spawnpoint.GetOrigin(), spawnpoint.GetAngles() )
	DispatchSpawn( titan )
	titan.ContextAction_SetBusy() // This is prevent a race condition with the ability of players being able to spawn into their Titans
	HideName( titan )
	titan.SetValidHealthBarTarget( false ) // Hide HP bar overhead
	titan.UnsetUsable() // Prevent embark prompt from showing up
	ClearTitanAvailable( player ) // Clear titan availability, so faction leader won't advise "Titan Ready" during spawn
	
	AddCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING )
	
	player.EndSignal( "OnDeath" ) // In case of cinematic titanfall and Round End code is killing everything in cleanup function
	player.EndSignal( "OnDestroy" )
	bool playerCouldDisembark = CanDisembark( player ) // Check to save in case of cinematic titanfall further below

	entity camera

	OnThreadEnd( function() : ( player, titan, camera, spawnpoint, normalTitanfall, playerCouldDisembark )
	{
		if ( IsValid( player ) )
		{
			player.isSpawning = false
			player.isSpawningHotDroppingAsTitan = false
			RemoveCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING )

			if ( player.IsInvulnerable() ) // Clear Invulnerability from the cinematic animation
				player.ClearInvulnerable()
			
			if ( normalTitanfall ) // Cleanups if spawning from cinematic animation
			{
				DeleteAnimEvent( player, "titan_impact" )
				DeleteAnimEvent( player, "second_stage" )
				player.SetTouchTriggers( true )
				player.SetNoTarget( false )
				player.SetNoTargetSmartAmmo( false )
				player.EnableWeaponViewModel()
				DeployAndEnableWeapons( player )
				ClearPlayerAnimViewEntity( player )
				Remote_CallFunction_Replay( player, "ServerCallback_UpdateTitanModeHUD" ) // For Tone because look like holstered offhands prevents her from getting the Lock-Ons hud elements

				entity soul = player.GetTitanSoul()
				if ( IsValid( soul ) )
				{
					entity domeShield = soul.soul.bubbleShield
					if ( IsValid( domeShield ) )
					{
						domeShield.ClearParent() // Clear parenting when player gain control so the Bubble shield doesn't follow their movement
						domeShield.SetOwner( player ) // Shoot through
					}
				}
			}
			else
				GiveTitanfallScoreMedal( player ) // In case of classic Warpfall animation, give the Titanfall Score Medal at this moment, so player can actually see it

			if ( player.ContextAction_IsBusy() )
				player.ContextAction_ClearBusy()
			
			PutEntityInSafeSpot( player, null, null, spawnpoint.GetOrigin(), player.GetOrigin() ) // Just to Ensure player is not clipping in any geometry
			if( normalTitanfall && playerCouldDisembark ) // LTS/Iron Rules check to avoid bypass confusion
				Disembark_Allow( player )
		}

		if ( IsValid( titan ) )
			titan.Destroy()
		else if ( !IsAlive( player ) ) // Respawn player anyways if Titan was killed during animation from normal Warpfall animation, won't affect Cinematic because player is already Respawned in there
			RespawnAsPilot( player )

		if ( IsValid( camera ) )
			camera.Destroy()
		
		if ( IsValid( spawnpoint ) )
			ToggleSpawnNodeInUse( spawnpoint, false )
	})

	if ( instantRespawn ) // Respawn instantly
	{
		DoRespawnPlayer( player, spawnpoint )
		TeleportToEnt( player, titan )
		PilotBecomesTitan( player, titan )
		EmitSoundOnEntity( player, "Timeshift_Scr_InvoluntaryShift" )
		PlayFXOnEntityForEveryoneExceptPlayer( $"P_phase_shift_main_XO", player, player )
	}
	else if ( normalTitanfall ) // First Person Cinematic Titanfall
	{
		DoRespawnPlayer( player, spawnpoint )
		PilotBecomesTitan( player, titan )
		Disembark_Disallow( player ) // Disable disembarking so players can't do some wild stuff while the animation is happening
		titan.Destroy() // Destroy the Titan right here as the player itself will be doing the animation already as a Titan

		player.SetInvulnerable()
		player.ContextAction_SetBusy() // Set player context action as busy to prevent problems with many interactors
		player.SetTouchTriggers( false ) // Prevents OOB triggers during animation
		player.SetNoTarget( true ) // AI wont try to shoot players while they drop
		player.SetNoTargetSmartAmmo( true ) // Prevent Tone, Archer and Predator Cannon from locking on drop
		HolsterAndDisableWeapons( player )
		player.DisableWeaponViewModel()
		TeleportToEnt( player, spawnpoint )
		HideName( player ) // Hides overhead name during animation, OnTitanHotdropImpact restores this from the anim event
		GiveTitanfallScoreMedal( player )
		ScreenFadeFromBlack( player, 0.5, 0.5 )

		AddAnimEvent( player, "titan_impact", OnTitanHotdropImpact ) // Brought from PlayersTitanHotdrops function to properly work
		AddAnimEvent( player, "second_stage", OnReplacementTitanSecondStage, spawnpoint.GetOrigin() ) // Brought from PlayersTitanHotdrops function to properly work

		EmitDifferentSoundsAtPositionForPlayerAndWorld( "titan_hot_drop_turbo_begin", "titan_hot_drop_turbo_begin_3P", spawnpoint.GetOrigin(), player, player.GetTeam() ) // Brought from PlayersTitanHotdrops function to play the Titanfall sound
		EmitSoundOnEntityOnlyToPlayer( player, player, "titan_hot_drop_turbo_begin" ) // Play again only for player just to volume it up a bit since it's super quiet sound in 1st Person

		float impactTime = GetHotDropImpactTime( player, "at_hotdrop_drop_2knee_turbo" )
		delaythread( impactTime ) CreateParentedBubbleShield( player, spawnpoint.GetOrigin(), spawnpoint.GetAngles(), player.GetSequenceDuration( "at_hotdrop_quickstand" ) + 3 ) // Created Domeshield for the entire deploying animation + 3 seconds of lenience
		delaythread( impactTime - 0.5 ) EmitSoundOnEntityOnlyToPlayer( player, player, "TDay_Intro_TitanFall_Impact" ) // Landing sound in first person from TDay, half second early to sync properly with the actual Landing

		// Actual Titanfall animation, sadly MP Titans don't have viewmodel animations for this like BT does
		FirstPersonSequenceStruct titanDropSequence
		titanDropSequence.thirdPersonAnim = "at_hotdrop_drop_2knee_turbo"
		titanDropSequence.teleport = true
		titanDropSequence.snapPlayerFeetToEyes = false
		titanDropSequence.viewConeFunction = ViewConeNarrow
		waitthread FirstPersonSequence( titanDropSequence, player )
		
		// Getting up and armed animation
		FirstPersonSequenceStruct titanStandSequence
		titanStandSequence.thirdPersonAnim = "at_hotdrop_quickstand"
		titanStandSequence.snapPlayerFeetToEyes = false
		titanStandSequence.viewConeFunction = ViewConeNarrow
		waitthread FirstPersonSequence( titanStandSequence, player )
	}
	else // Classic Warpfall animation camera
	{
		camera = CreateTitanDropCamera( spawnpoint.GetAngles(), < 90, titan.GetAngles().y, 0 > )
		camera.SetParent( titan )
		
		vector xyOffset = RotateAroundOrigin2D( < 44, 0, 520 >, < 0, 0, 0 >, spawnpoint.GetAngles().y )
		
		camera.SetLocalOrigin( xyOffset )
		camera.SetLocalAngles( < camera.GetAngles().x, spawnpoint.GetAngles().y, camera.GetAngles().z > ) // this straight up just does not work lol
		player.SetViewEntity( camera, true )
		
		titan.EndSignal( "OnDeath" )
		titan.EndSignal( "OnDestroy" )
		TeleportToEnt( titan, spawnpoint )

		waitthread TitanHotDrop( titan, "at_hotdrop_01", spawnpoint.GetOrigin(), spawnpoint.GetAngles(), player, camera )
		DoRespawnPlayer( player, spawnpoint )
		TeleportToEnt( player, titan )
		PilotBecomesTitan( player, titan )
	}
}

void function OnReplacementTitanSecondStage( entity player )
{
	vector origin = expect vector( GetOptionalAnimEventVar( player, "second_stage" ) )
	EmitSoundOnEntityOnlyToPlayer( player, player, "titan_drop_pod_turbo_landing" )
	EmitSoundOnEntityOnlyToPlayer( player, player, "titan_drop_pod_turbo_landing" ) // Double sound just to volume it up because it's also quiet in 1st Person
	EmitSoundAtPositionExceptToPlayer( player.GetTeam(), origin, player, "titan_drop_pod_turbo_landing_3P" )
}










/*
██    ██ ████████ ██ ██      ██ ████████ ██    ██ 
██    ██    ██    ██ ██      ██    ██     ██  ██  
██    ██    ██    ██ ██      ██    ██      ████   
██    ██    ██    ██ ██      ██    ██       ██    
 ██████     ██    ██ ███████ ██    ██       ██    
*/

void function TryGameModeAnnouncement( entity player )
{
	Remote_CallFunction_NonReplay( player, "ServerCallback_GameModeAnnouncement" )
	PlayFactionDialogueToPlayer( GameMode_GetGameModeAnnouncement( GAMETYPE ), player )
}

void function SetPlayerDeathsHidden( bool hidden )
{
	file.playerDeathsHidden = hidden
}

void function TrackTitanDamageInPlayerGameStat( int playerGameStat )
{
	file.titanDamageGameStat = playerGameStat
}

void function AddToTitanDamageStat( entity victim, var damageInfo )
{
	if ( !victim.IsTitan() || file.titanDamageGameStat == -1 )
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	float amount = DamageInfo_GetDamage( damageInfo )

	if ( attacker.IsPlayer() && attacker != victim )
		attacker.AddToPlayerGameStat( file.titanDamageGameStat, amount )
}

void function CheckForAutoTitanDeath( entity victim, entity attacker, var damageInfo )
{
	if ( !IsValid( victim ) || !victim.IsTitan() || victim == attacker )
		return

	if ( GetPetTitanOwner( victim ) == attacker )
		return
	
	entity inflictor = DamageInfo_GetInflictor( damageInfo )
	if ( IsValid( inflictor ) )
	{
		if ( inflictor.IsProjectile() && IsValid( inflictor.GetOwner() ) && inflictor.GetOwner().IsTitan() )
			attacker = inflictor.GetOwner()
		
		else if ( IsNPCTitan( inflictor ) )
			attacker = inflictor
	}

	foreach ( player in GetPlayerArray() )
		Remote_CallFunction_NonReplay( player, "ServerCallback_OnTitanKilled", attacker.GetEncodedEHandle(), victim.GetEncodedEHandle(), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamageSourceIdentifier( damageInfo ) )
}

void function SetRecalculateRespawnAsTitanStartPointCallback( entity functionref( entity player, entity basePoint ) callbackFunc )
{
	file.recalculateRespawnAsTitanStartPointCallback = callbackFunc
}

void function CheckGameStateForPlayerMovement( entity player )
{
	if ( !IsAlive( player ) )
		return
	
	if ( GetGameState() == eGameState.WinnerDetermined || GetGameState() == eGameState.SwitchingSides || GetGameState() == eGameState.Postmatch )
	{
		if ( level.endOfRoundPlayerState == ENDROUND_FREEZE )
			player.FreezeControlsOnServer()
		else if ( level.endOfRoundPlayerState == ENDROUND_MOVEONLY )
		{
			player.DisableWeapon()
			player.Server_TurnOffhandWeaponsDisabledOn()
		}
	}
}

void function CheckGameStateAfterSpawn_Threaded( entity player, float waitTime = 0.1 )
{
	player.EndSignal( "OnDestroy" )
	wait waitTime
	CheckGameStateForPlayerMovement( player )
}

void function CheckGameStateForTitanEjection( entity pilot, entity titan )
{
	thread CheckGameStateAfterSpawn_Threaded( pilot, 0.5 )
}

void function CheckPlayerGetsNewLoadout( entity player, PilotLoadoutDef loadout )
{
	thread CheckGameStateAfterSpawn_Threaded( player )

	foreach ( entity weapon in player.GetMainWeapons() )
	{
		if ( weapon.GetWeaponClassName() == "mp_weapon_rocket_launcher" && !weapon.HasMod( "fast_lock" ) && GetCurrentPlaylistVarInt( "archer_fast_lock", 0 ) == 1 )
			weapon.AddMod( "fast_lock" )
		if ( weapon.GetWeaponClassName() == "mp_weapon_epg" && !weapon.HasMod( "jump_kit" ) && GetCurrentPlaylistVarInt( "epg_splash_push", 0 ) == 1 )
			weapon.AddMod( "jump_kit" )
	}
}

void function SetGamemodeAllowsTeamSwitch( bool enabled )
{
	file.gamemodeTeamSwitchEnabled = enabled
}

bool function ClientCommandCallbackChangeTeam( entity player, array<string> args )
{
	if ( !GetConVarBool( "ns_allow_team_change" ) || IsPrivateMatchSpectator( player ) )
		return true

	if ( !file.gamemodeTeamSwitchEnabled )
	{
		SendHudMessage( player, "#TEAMSWITCH_GAMEMODE", -1, 0.4, 255, 255, 255, 255, 0.15, 3.0, 0.5 )
		return true
	}
	
	if ( !( player in file.playerChangeTeamTimeBuffer ) )
	{
		file.playerChangeTeamTimeBuffer[ player ] <- Time() + 5.0
	}
	else
	{
		if ( file.playerChangeTeamTimeBuffer[ player ] > Time() )
		{
			SendHudMessage( player, "#TEAMSWITCH_BUFFER", -1, 0.4, 255, 255, 255, 255, 0.15, 3.0, 0.5 )
			return true
		}
	}
	
	if ( player in file.playerChangeTeamTimeBuffer && file.playerChangeTeamTimeBuffer[ player ] < Time() )
		file.playerChangeTeamTimeBuffer[ player ] = Time() + 5.0
	
	if ( !GamePlaying() )
	{
		SendHudMessage( player, "#TEAMSWITCH_GAMEPLAY", -1, 0.4, 255, 255, 255, 255, 0.15, 3.0, 0.5 )
		return true
	}

	if ( GetCurrentPlaylistVarInt( "max_teams", 0 ) > 1 && !IsFFAGame() )
		SetTeam( player, GetOtherTeam( player.GetTeam() ) )
	else
		SendHudMessage( player, "#TEAMSWITCH_DISABLED", -1, 0.4, 255, 255, 255, 255, 0.15, 3.0, 0.5 )
	
	return true
}

bool function ShouldEntTakeDamage_SPMP( entity ent, var damageInfo )
{
	if ( ( IsDropship( ent ) || IsEvacDropship( ent ) ) && IsTitanCrushDamage( damageInfo ) )
		return false
	
	return true
}

float function GetTitanBuildTime( entity player )
{
	if ( player.titansBuilt == 0 )
		return GetCurrentPlaylistVarFloat( "titan_build_time", 180 )
	
	return GetCurrentPlaylistVarFloat( "titan_rebuild_time", 180 )
}











/*
███████ ████████ ██    ██ ██████  ███████ 
██         ██    ██    ██ ██   ██ ██      
███████    ██    ██    ██ ██████  ███████ 
     ██    ██    ██    ██ ██   ██      ██ 
███████    ██     ██████  ██████  ███████ 
*/

void function TitanPlayerHotDropsIntoLevel( entity player )
{

}
