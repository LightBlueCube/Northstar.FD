untyped
global function MpInitAILoadouts
global function SetProficiency
global function SPMP_UpdateNPCProficiency
global function SPMP_Callback_ForceAIMissPlayer
global function IsAutoPopulateEnabled

global function AILoadout_SetupNPCWeapons
global function AILoadout_SetupNPCAntiTitanWeapons
global function AILoadout_GetRandomWeaponForClass
global function AILoadout_GetRandomATWeaponForClass

struct{
	table< string, array<string> > customNPCWeapons
	table< string, array<string> > customNPCATWeapons

	table< string, array<string> > defaultNPCWeapons
	table< string, array<string> > defaultNPCATWeapons
}file











/*
 █████  ██     ██       ██████   █████  ██████   ██████  ██    ██ ████████ ███████ 
██   ██ ██     ██      ██    ██ ██   ██ ██   ██ ██    ██ ██    ██    ██    ██      
███████ ██     ██      ██    ██ ███████ ██   ██ ██    ██ ██    ██    ██    ███████ 
██   ██ ██     ██      ██    ██ ██   ██ ██   ██ ██    ██ ██    ██    ██         ██ 
██   ██ ██     ███████  ██████  ██   ██ ██████   ██████   ██████     ██    ███████ 
*/

void function MpInitAILoadouts()
{
	file.defaultNPCWeapons["npc_soldier"] <- [ "mp_weapon_rspn101", "mp_weapon_dmr", "mp_weapon_r97", "mp_weapon_lmg" ]
	file.defaultNPCWeapons["npc_spectre"] <- [ "mp_weapon_hemlok_smg", "mp_weapon_doubletake", "mp_weapon_mastiff" ]
	file.defaultNPCWeapons["npc_stalker"] <- [ "mp_weapon_hemlok_smg", "mp_weapon_lstar", "mp_weapon_mastiff" ]

	file.defaultNPCATWeapons["npc_soldier"] <- [ "mp_weapon_defender", "mp_weapon_rocket_launcher" ]
	file.defaultNPCATWeapons["npc_spectre"] <- [ "mp_weapon_defender", "mp_weapon_rocket_launcher" ]
	file.defaultNPCATWeapons["npc_stalker"] <- [ "mp_weapon_defender", "mp_weapon_rocket_launcher" ]
}

void function AILoadout_SetupNPCWeapons( string npcClass, array<string> weapons )
{
	if ( !( npcClass in file.customNPCWeapons ) )
		file.customNPCWeapons[ npcClass ] <- []

	file.customNPCWeapons[ npcClass ] = weapons
}

void function AILoadout_SetupNPCAntiTitanWeapons( string npcClass, array<string> weapons )
{
	if ( !( npcClass in file.customNPCATWeapons ) )
		file.customNPCATWeapons[ npcClass ] <- []
	
	file.customNPCATWeapons[ npcClass ] = weapons
}

string function AILoadout_GetRandomWeaponForClass( entity npc )
{
	string className = npc.GetClassName()
	if ( className in file.customNPCWeapons )
	{
		if ( file.customNPCWeapons[ className ].len() )
			return file.customNPCWeapons[ className ].getrandom()
	}
	else if ( className in file.defaultNPCWeapons )
		return file.defaultNPCWeapons[ className ].getrandom()

	return ""
}

string function AILoadout_GetRandomATWeaponForClass( entity npc )
{
	string className = npc.GetClassName()
	if ( className in file.customNPCATWeapons )
	{
		if ( file.customNPCATWeapons[ className ].len() )
			return file.customNPCATWeapons[ className ].getrandom()
	}
	else if ( className in file.defaultNPCATWeapons )
		return file.defaultNPCATWeapons[ className ].getrandom()

	return ""
}











/*
 █████  ██     ██████  ██████   ██████  ███████ ██  ██████ ███████ ███    ██  ██████ ██    ██ 
██   ██ ██     ██   ██ ██   ██ ██    ██ ██      ██ ██      ██      ████   ██ ██       ██  ██  
███████ ██     ██████  ██████  ██    ██ █████   ██ ██      █████   ██ ██  ██ ██        ████   
██   ██ ██     ██      ██   ██ ██    ██ ██      ██ ██      ██      ██  ██ ██ ██         ██    
██   ██ ██     ██      ██   ██  ██████  ██      ██  ██████ ███████ ██   ████  ██████    ██    
*/

void function SetProficiency( entity npc )
{
	npc.kv.WeaponProficiency = level.nv.aiLethality
}

void function SPMP_UpdateNPCProficiency( entity npc )
{
	#if MP
	UpdateNPCForAILethality( npc )
	#else
	SetProficiency( npc )
	#endif
}

bool function IsAutoPopulateEnabled( var team = null )
{
	if ( IsNPCSpawningEnabled() == false )
		return false

	if ( Flag( "disable_npcs" ) )
		return false

	if ( team == TEAM_MILITIA && Flag( "Disable_MILITIA" ) )
		return false
	if ( team == TEAM_IMC && Flag( "Disable_IMC" ) )
		return false

	return true
}

bool function SPMP_Callback_ForceAIMissPlayer( entity npc, entity player )
{
	if ( GetGameState() >= eGameState.Postmatch )
		return true
	
	if ( player.IsTitan() )
		return false
		
	int lethality = Riff_AILethality()
	if ( lethality <= eAILethality.Medium )
		if ( player.GetTitanSoulBeingRodeoed() != null )
			return true
	
	if ( Bleedout_IsBleedoutLogicActive() && Bleedout_ShouldAIMissBleedingPlayer( player ) )
		return true
	
	if ( player.ContextAction_IsActive() )
		return RandomFloat( 1 ) >= 0.25
	
	if ( IsFastPilot( player ) )
	{
		float chance = ( lethality + 1 ) * 0.125
		if ( lethality <= eAILethality.Medium && npc.IsMechanical() )
			chance /= 1.25
		
		return RandomFloat( 1 ) >= chance
	}
	
	return false
}
